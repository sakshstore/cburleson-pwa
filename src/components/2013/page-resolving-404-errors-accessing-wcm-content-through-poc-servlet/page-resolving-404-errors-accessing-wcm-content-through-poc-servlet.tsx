import { Component, h } from '@stencil/core';
import { isLocal, SITENAME } from '../../../helpers/utils';

import { BlogData } from '../../../services/blog-data';


@Component({
    tag: 'page-resolving-404-errors-accessing-wcm-content-through-poc-servlet',
})
export class PageResolving404ErrorsAccessingWcmContentThroughPocServlet {

    title = 'Blog';

    // header for this individual item by id...
    header: any;

    async componentWillLoad() {
        if (isLocal()) {
            console.log('> PageResolving404ErrorsAccessingWcmContentThroughPocServlet.componentWillLoad');
        }
        // this.data = await BlogData.load();
        // Get the id from the URL path (slug)
        let id = document.location.pathname.substring( document.location.pathname.lastIndexOf('/') + 1 );
        this.header = BlogData.getPostHeaderById(id);

        // set document title for browser / tab / bookmark
        document.title = this.header.title + ' | ' + SITENAME;
        if (this.header.teaser) {
            document.getElementById("meta-desc").setAttribute("content", this.header.teaser);
        }
    }

    render() {
        return [
            <ion-header>
                <ion-toolbar color="primary">
                    <ion-buttons slot="start">
                        <ion-back-button defaultHref="/" />
                    </ion-buttons>
                    <ion-title>Blog</ion-title>
                </ion-toolbar>
            </ion-header>,

            <ion-content class="ion-padding">

                <ion-grid>
                    <ion-row>
                        <ion-col size-xs="12" size-sm="12" size-md="8" size-lg="8" size-xl="7">
                            <h1>{this.header.title}</h1>
                            <app-entry-meta header={this.header} />

                            <p>The other day, I got a tweet from my buddy, Dave Hay, who blogs on A Portal to a Portal. He was looking for a post I had in my former blog before a lot of that content was lost. I looked on the <a href="http://archive.org/web/web.php" rel="nofollow">Internet Archive Wayback Machine</a>, which allows you to look at the Web as it was in the past and I found the content so I’m reposting it. Dave has since added more information to this subject, so be sure to check out his post also: &quot;<a href="http://portal2portal.blogspot.com/2013/01/more-on-404-errors-accessing-wcm.html">More on 404 errors accessing WCM content through the POC Servlet (/wps/mypoc/…)</a>&quot;</p>
                            <p>Here’s the original post from December, 2011:</p>
                            <p>Recently, we had a problem where WCM URLs in OmniFind search results (generated by the Portal seedlist mechanism) were giving 404 errors when clicked. These are URLs that contain /wps/mypoc in the URL. This page documents a solution that worked for us.</p>
                            <p>/poc and /mypoc are mapped to the POC Servlet which is part of the URI resolution framework. The purpose of the URI resolution framework is to resolve a WCM resource (that is, a <em>piece of content</em> or POC) to a portal view.</p>
                            <p>But let me get to the point quickly. As you may know, you can create a portal page with the WCM Web Content Viewer (JSR286) on it and map the portal page to a site or web content folder in WCM. After creating and saving a portal page, you can find this mapping control in the advanced section when you edit the page properties. After mapping the portal page to a web content folder in WCM, any piece of content within that area should then get resolved to the mapped portal page and consequently render in the JSR286 viewer that is on it.</p>
                            <p>But recently, we had an issue where that wasn’t going too well for us; the default URL generated by the seedlist mechanism just wasn’t working – we got 404 response. We could not get the POC Servlet to resolve properly to a portal page. We were able to resolve the issue by rewriting the URL using a RegEx filter mechanism available to OmniFind. We found that links would always resolve properly as long as the base URL was as follows (with the content identifier appended):</p>
                            <p><code>https://www.ourportal.com/wps/mypoc/?urile=wcm%3apath%3a%2f</code></p>
                            <p>That is just an encoded form of the following:</p>
                            <p><code>https://www.ourportal.com/wps/mypoc/?urile=wcm:path:/</code></p>
                            <p>Append the content identifier to the end of that (typically the wcm library, site area path, and content ID). For example:</p>
                            <p><code>Content%2fSiteArea1%2fSiteArea1-1%2f7cdad580493e87dd89e7891b4dda79ec</code></p>
                            <p>Together, the resolvable URL should looks something like this:</p>
                            <p><code>https://www.ourportal.com/wps/mypoc/?urile=wcm%3apath%3a%2fContent%2fSiteArea1%2fSiteArea1-1%2f7cdad580493e87dd89e7891b4dda79ec</code></p>
                            <p>And that worked for us. It resolved to a portal view. You could tell because the URL in the browser then switched to one of those crazy portal URLs with all the state information encoded in it… and the expected piece of content was rendered in the JSR286 Web Content Viewer.</p>

                        </ion-col>
                        <ion-col size-xs="12" size-sm="12" size-md="4" size-lg="4" size-xl="5">

                            <gls-adsense-ad />

                        </ion-col>
                    </ion-row>
                </ion-grid>

            </ion-content>

        ];
    }
}